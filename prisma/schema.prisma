generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                   String         @id @default(auto()) @map("_id") @db.ObjectId
  name                 String?
  email                String?        @unique
  emailVerified        DateTime?
  image                String?
  phoneNumber          String?
  createdAt            DateTime       @default(now())
  subscribedChannelIds String[]       @db.ObjectId
  likedVideoIds        String[]       @db.ObjectId
  dislikedVideoIds     String[]       @db.ObjectId
  account              Account?
  channel              Channel?
  subscriptions        Subscription[] // Link to Subscription model

  @@unique([email, phoneNumber], name: "unique_phone_email_subscription")
}

model Subscription {
  id         String             @id @default(auto()) @map("_id") @db.ObjectId
  userId     String             @db.ObjectId // Foreign key to User
  user       User               @relation(fields: [userId], references: [id])
  amount     Float
  startDate  DateTime
  expiryDate DateTime
  status     SubscriptionStatus
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt

  @@unique([userId, status], name: "unique_active_subscription") // Ensures only one active subscription per user
}

enum SubscriptionStatus {
  ACTIVE
  EXPIRED
  CANCELED
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @unique @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Channel {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  userId          String   @unique @db.ObjectId
  name            String
  handle          String
  imageSrc        String
  createdAt       DateTime @default(now())
  subscriberCount Int      @default(0)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  comments Comment[]
  videos   Video[]
}

model Video {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  channelId    String   @db.ObjectId
  title        String
  description  String
  likeCount    Int      @default(0)
  dislikeCount Int      @default(0)
  viewCount    Int      @default(0)
  createdAt    DateTime @default(now())
  thumbnailSrc String
  videoSrc     String

  channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  comments Comment[]
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  videoId   String   @db.ObjectId
  channelId String   @db.ObjectId
  text      String
  createdAt DateTime @default(now())

  video   Video   @relation(fields: [videoId], references: [id], onDelete: Cascade)
  channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)
}
